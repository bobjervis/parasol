include	file;

DIGIT_SIZE:	const	int = 4;	// size in bits

Hex:		[100] unsigned[DIGIT_SIZE];
NextDigit:	[100] unsigned[DIGIT_SIZE];

main:	entry	() =
	{
	if	(|commandLine.arguments != 1){
		printf("Use is: BIGNUM decimal\n");
		return;
		}

	cp:	[:] char;

	cp = commandLine.arguments[0];
	for	(i = 0; i < |cp && isdigit(cp[i]); i++){
		digitMultiply(Hex, 10, |Hex);
		digitAdd(Hex, cp[i] - '0', |Hex);
		}
	if	(i < |cp){
		printf("Malformed digit string\n");
		return;
		}
	i, j:	int;

	for	(i = 0; i < |Hex; i++)
		if	(Hex[i])
			break;
	j = 0;
	do	{
		c:	char;

		if	(Hex[i] < 10)
			c = Hex[i] + '0';
		else
			c = Hex[i] + 'a' - 10;
		printf("%c", c);
		i++;
		j++;
		}
		while	(i < |Hex);
	printf("\n");
	printf("Approximately %d bits wide\n", j * DIGIT_SIZE);
	exit(EX_SUCCESS);
	}
/*
	Multiply two digit arrays.
 */
bigMultiply:	(a: ref unsigned[DIGIT_SIZE], 
		 b: ref unsigned[DIGIT_SIZE], len: int) int =
	{
	}
/*
	Multiply the digit b by the array a.
 */
digitMultiply:	(a: ref unsigned[DIGIT_SIZE], 
		 b: unsigned[DIGIT_SIZE], len: int) =
	{
	i, j, carry:	int;

		// multiply by zero is easy.

	if	(b == 0){
		memSet(a, 0, len * sizeof a[0]);
		return;
		}
	for	(i = len - 1, carry = 0; i >= 0; i--){
		j = a[i] * b + carry;
		carry = j >> DIGIT_SIZE;
		a[i] = j & (1 << DIGIT_SIZE - 1);
		}
	}
/*
	Add two digit arrays and return the final carry value.
 */
bigAdd:	(a: ref unsigned[DIGIT_SIZE], 
	 b: ref unsigned[DIGIT_SIZE], len: int) int =
	{
	i, j, carry:	int;

	for	(i = len - 1, carry = 0; i >= 0; i--){
		j = a[i] + b[i] + carry;
		carry = j >> DIGIT_SIZE;
		a[i] = j & (1 << DIGIT_SIZE - 1);
		}
	return carry;
	}
/*
	Add the digit b into the array a and return the final carry value.
 */
digitAdd:	(a: ref unsigned[DIGIT_SIZE], 
	 b: unsigned[DIGIT_SIZE], len: int) int =
	{
	i, j, carry:	int;

	for	(i = len - 1, carry = b; i >= 0; i--){
		j = a[i] + carry;
		carry = j >> DIGIT_SIZE;
		a[i] = j & (1 << DIGIT_SIZE - 1);
		}
	return carry;
	}
