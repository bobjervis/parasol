/*
	Copyright (c) 1993 by Robert Jervis
	All rights reserved.

	Permission to use, copy, modify and distribute this software is
	subject to the license described in the READ.ME file.
 */
include	_startup;
include hardware;
/*
	Parasol naming conventions:

	The exact spelling of a symbol needs to convey some information about
	what it is.  Syntactic usage disambiguates some things.  For example,
	function names are almost always used in the context of a call, so
	they can use the same spelling as other kinds of symbols.  Type names,
	however, should be capitalized.

	Also, a leading underbar indicates an unsupported symbol.  Such a
	symbol can be changed at any time in the future.  Applications should
	avoid using any symbol with a leading underbar except within the
	same unit as its definition or with a fully qualified name.

	Symbols fall into several categories:

	type			Capitalized.  Infix words are capitalized.
	object or function	Initial lower case.  Infix words are
				capitalized.
	constant		All capitals, prefix can be a one or two letter
				abbreviation for the type of the constant
				separated from the constant by an underbar.

	Note that certain types defined in this file are spelled in lower case.
	These do not follow the normal spelling conventions for historical
	reasons.  The built-in types are spelled in lower case.

------------------------------------------------------------------------------
		Portable intrinsics

	These are the built-in portable functions of the compiler:
 */
abs:		public	(x: int) int = 				_abs;
memScan:	public	(s: pointer, c: byte, len: Size) pointer = _memScan;
memCopy:	public	(dest: pointer, src: pointer, len: Size) = _memCopy;
memSet:		public	(s: pointer, c: byte, len: Size) = 	_memSet;
rotateLeft:	public	(value: unsigned, shiftAmt: byte)
						unsigned = 	_rotateLeft;
rotateRight:	public	(value: unsigned, shiftAmt: byte)
						unsigned = 	_rotateRight;
fabs:		public	(x: extended) extended = 		_fabs;
exchangeByte:	public	(x: ref byte, y: byte) byte = 		_exchangeByte;
exchangeInt:	public	(x: ref int, y: int) int = 		_exchangeInt;
exchangeShort:	public	(x: ref signed[16], y: short) short = 	_exchangeShort;
roundInt:	public	(x: extended) extended = 		_roundInt;
_cvtBCD:	public	(x: extended, buf: ref byte) = 		__cvtBCD;

bitScanForward:	public	(u: unsigned) int = 			_bitScanForward;

memCompare:	public	(ps1: pointer, ps2: pointer, n: Size) int = _memCompare;

memMove:	public	(dst: pointer, src: pointer, len: Size) = _memMove;

bsearch:	public	(key: pointer, base: pointer, nelem: int, width: int,
			 fcmp: ref (pointer, pointer) int) pointer = _bsearch;

exit:	public	(code: ExitCode) = _exit;

ExitCode:	public	type	unsigned[32] = {
	EX_SUCCESS	= 0,
	EX_FAIL		= 1,
	EX_CORE		= 0x80000000,
	EX_CAUSE	= 0x0F000000,
	EX_NORMAL	= 0x00000000,
	EX_ABORT	= 0x01000000,
	EX_RAISE	= 0x02000000,
	EX_LEVEL	= 0x00FFFFFF,	/* Ignore the high order bits */
	};
//
//	This routine stops execution without executing the cleanup sequence.
//
abort:	public	(code: ExitCode) = _abort;
/*
------------------------------------------------------------------------------
		Built-in types

	These are the built-in types of the language:
 */
bit:		public	type	unsigned[1];
byte:		public	type	unsigned[BYTE_BITS];
signedByte:	public	type	signed	[BYTE_BITS];
unsignedByte:	public	type	unsigned[BYTE_BITS];
char:		public	type	unsigned[CHAR_BITS];
short:		public	type	signed	[SHORT_BITS];
unsignedShort:	public	type	unsigned[SHORT_BITS];
int:		public	type	signed	[INT_BITS];
long:		public	type	signed	[LONG_BITS];
unsignedLong:	public	type	unsigned[LONG_BITS];
single:		public	type	float	[FLOAT_BITS];
double:		public	type	float	[DOUBLE_BITS];
extended:	public	type	float	[EXTENDED_BITS];

Size:		public	type	unsigned;
PtrDiff:	public	type	signed;
Tick:		public	type	unsigned;
Time:		public	type	unsigned;
Atomic:		public	type	byte;

boolean:	public	type	char = {
	FALSE,
	TRUE
	};
/*
------------------------------------------------------------------------------
		Built-in constants
 */
NULL:		public	const	int = 0;

NaN:		public	const	single = 0x1p-97081;	// magic exponent
DNaN:		public	const	double = 0x1p-97081;	// magic exponent
XNaN:		public	const	extended = 0x1p-97081;	// magic exponent
INFINITY:	public	const	single = 0x1p97081;	// magic exponent

/*
------------------------------------------------------------------------------
		Built-in floating point
 */
Fexcept:	public	type	short = {
	FE_INVALID 	= 0x01,
	FE_DENORMAL 	= 0x02,		// Intel 80x86 only
	FE_DIVBYZERO	= 0x04,
	FE_OVERFLOW 	= 0x08,
	FE_UNDERFLOW 	= 0x10,
	FE_INEXACT 	= 0x20,

	FE_ALL_EXCEPT	= 0x3F
	};

Frounds:	public	type	short = {
	FE_TONEAREST 	= 0x000,
	FE_UPWARD	= 0x400,
	FE_DOWNWARD	= 0x800,
	FE_TOWARDZERO	= 0xC00
	};

Fenv:	public	type	packed { public:

		// Data members are Intel only

	control:	unsigned[32];
	status:		unsigned[32];
	tag:		unsigned[32];
	fip:		unsigned[32];
	fcs:		unsigned[16];
	opcode:		unsigned[16];
	foo:		unsigned[32];
	fos:		unsigned[32];

		// Methods are portable

load:	(f: Fenv) =
	{
	if	(self == &_FENV){
		_EAX = unsigned(&f);
		_emit(0xD9, 0x20);		// fldenv [eax]
		}
	else
		*self = f;
	}

save:	() Fenv =
	{
	if	(self == &_FENV){
		f:	Fenv;

		_EAX = unsigned(&f);
		_emit(0xD9, 0x30);		// fstenv [eax]
//		return f;
		}
//	else
//		return *self;
	}

update:	(f: Fenv) =
	{
	f setRaised(self raised());
	if	(self == &_FENV){
		_EAX = unsigned(&f);
		_emit(0xD9, 0x20);		// fldenv [eax]
		}
	else
		*self = f;
	}

mask:	(e: Fexcept) boolean =
	{
	if	(e & FE_ALL_EXCEPT != e)
		return FALSE;
	if	(self == &_FENV){
		x:	short;

		_EAX = unsigned(&x);
		_emit(0xD9, 0x38);		// fstcw [eax]
		x |= e;
		_EAX = unsigned(&x);
		_emit(0xD9, 0x28);		// fldcw [eax]
		}
	else
		control |= e;
	return TRUE;
	}

unmask:	(e: Fexcept) boolean =
	{
	if	(e & FE_ALL_EXCEPT != e)
		return FALSE;
	if	(self == &_FENV){
		x:	short;

		_EAX = unsigned(&x);
		_emit(0xD9, 0x38);		// fstcw [eax]
		x &= ~e;
		_EAX = unsigned(&x);
		_emit(0xD9, 0x28);		// fldcw [eax]
		}
	else
		control &= ~e;
	return TRUE;
	}

raised:	() Fexcept =
	{
	if	(self == &_FENV){
		_emit(0xDF, 0xE0);		// fstsw ax
		return _EAX & FE_ALL_EXCEPT;
		}
	else
		return status & FE_ALL_EXCEPT;
	}

setRaised:	(e: Fexcept) boolean =
	{
	if	(e & FE_ALL_EXCEPT != e)
		return FALSE;
	if	(self == &_FENV){
		f:	Fenv;

		_EAX = unsigned(&f);
		_emit(0xD9, 0x30);		// fstenv [eax]
		f.status &= ~FE_ALL_EXCEPT;
		f.status |= e;
		_EAX = unsigned(&f);
		_emit(0xD9, 0x20);		// fldenv [eax]
		}
	else	{
		status &= ~FE_ALL_EXCEPT;
		status |= e;
		}
	return TRUE;
	}

raise:	(e: Fexcept) boolean =
	{
	if	(e & FE_ALL_EXCEPT != e)
		return FALSE;
	if	(self == &_FENV){
		f:	Fenv;

		_EAX = unsigned(&f);
		_emit(0xD9, 0x30);		// fstenv [eax]
		f.status |= e;
		_EAX = unsigned(&f);
		_emit(0xD9, 0x20);		// fldenv [eax]
		}
	else
		status |= e;
	return TRUE;
	}

clear:	(e: Fexcept) boolean =
	{
	if	(e & FE_ALL_EXCEPT != e)
		return FALSE;
	if	(self == &_FENV){
		f:	Fenv;

		_EAX = unsigned(&f);
		_emit(0xD9, 0x30);		// fstenv [eax]
		f.status &= ~e;
		_EAX = unsigned(&f);
		_emit(0xD9, 0x20);		// fldenv [eax]
		}
	else
		status &= ~e;
	return TRUE;
	}

round:	(r: Frounds) boolean =
	{
	if	(r & 0xC00 != r)
		return FALSE;
	if	(self == &_FENV){
		x:	short;

		_EAX = unsigned(&x);
		_emit(0xD9, 0x38);		// fstcw [eax]
		x &= ~0xC00;
		x |= r;
		_EAX = unsigned(&x);
		_emit(0xD9, 0x28);		// fldcw [eax]
		}
	else	{
		control &= ~0xC00;
		control |= r;
		}
	return TRUE;
	}

roundsAs:	() Frounds =
	{
	if	(self == &_FENV){
		x:	short;

		_EAX = unsigned(&x);
		_emit(0xD9, 0x38);		// fstcw [eax]
		return x & 0xC00;
		}
	else
		return control & 0xC00;
	}

	};

Fclass:	public	type	int = {
	FP_NAN,
	FP_INFINITE,
	FP_NORMAL,
	FP_SUBNORMAL,
	FP_ZERO
	};

fpclassify:	public	(x: extended) Fclass =
	{
	if	(x !<>= 0.0)
		return FP_NAN;
	if	(x !<> 0.0)
		return FP_ZERO;
	x = fabs(x);
	if	(x !<> INFINITY)
		return FP_INFINITE;
	if	(x !>= 0x1p-16383)
		return FP_SUBNORMAL;
	else
		return FP_NORMAL;
	}

_FENV:			public	Fenv;
DEFAULT_FENV:	public	const Fenv = [ 0x37F, 0, 0xFFFF ];
/*
------------------------------------------------------------------------------
		entry and cleanup

	The following section describes the entry and cleanup tables and
	supporting data.  The memory for the tables is laid out as follows:

			_entry_		_entryVector
					_entryVector
					...
					_entryVector
			_cleanup_	_cleanupVector
					_cleanupVector
					...
			_endCleanup_

	The code asssumes these tables are contiguous in memory, though
	the exact location is unimportant.  The linker will magically
	assign real addresses to each of the symbols after it builds the
	tables themselves.
 */	
_entry_:		public	[1] _EntryVector = $0;
_cleanup_:		public	[1] _CleanupVector = $1;
_endCleanup_:		public	[1] _CleanupVector = $2;
_activeCleanup_:	public	ref _CleanupVector = _cleanup_;
/*
	The linker builds the entry vectors automatically corresponding to
	the list of entry functions in a project.
 */ 
_EntryVector:	public	type	{
	public:

	func:	ref ();
	exit:	ref _CleanupVector;
	};
/*
	The linker builds the cleanup vectors automatically corresponding to
	the list of cleanup functions in a project.
 */
_CleanupVector:	public	type	ref (int) int;

__symbols:	public	const __Symbols_t = [ ~0, 0 ];
				// So the compiler can play games with 
				// the initialized data area for this 
				// variable, be sure to scribble in it.

__Symbols_t:	public	type	{ public:
	symbolCount:		Size;
	symbolBase:		ref _SymbolDescriptor;

lookup:	(key: ref char) pointer =
	{
	s:	ref _SymbolDescriptor;

	s = bsearch(key, symbolBase, symbolCount, sizeof _SymbolDescriptor,
				&symbolCompare);
	if	(s)
		return s->address;
	else
		return 0;
	}

	};
/*
	Returns:

		-1 if key is less than entry,
		0 if key equals entry,
		1 if key is greater than entry
 */
symbolCompare:	(key: pointer, tableEntry: pointer) int =
	{
	sd:	ref _SymbolDescriptor;
	s1, s2:	ref char;

	sd = tableEntry;
	s1 = key;
	s2 = sd->name;
	while	(*s1 || *s2){
		if	(*s1 != *s2)
			return *s1 - *s2;
		s1++;
		s2++;
		}
	return 0;
	}

_SymbolDescriptor:	public	type	{ public:
	address:		pointer;
	name:			ref char;
	};
/*
------------------------------------------------------------------------------
		Command line arguments

	These variables define the command line arguments to be passed into
	a program.  These are defined, even for kernel contexts, but in the
	kernel they are always zero.  Note that the linker will drop them out
	if they are never used, so the kernel won't really link them in.
 */
commandLine:	public	{
	visible:

	commandPath:		[:] char;
	arguments:		[:] [:] char;

	public:

_initialize:	(cp: [:] char, a: [:] char) =
	{
	i, j, acnt:	int;
	s:		ref [:] char;

	commandPath = cp;
	acnt = 0;
	for	(i = 0; i < |a; i++)
		if	(a[i] == 0)
			acnt++;

		// If the last argument is not null-terminated count it

	if	(|a){
		if	(a[|a - 1])
			acnt++;
		else
			--|a;
		}
	if	(acnt == 0){
		|arguments = 0;
		return;
		}
	arguments = new [acnt] [:] char;
	for	(i = 0; i < acnt; i++){
		for	(j = 0; j < |a; j++)
			if	(a[j] == 0){
				break;
				}
		arguments[i] = a[:j];
		a = a[j + 1:];
		}
	}
/*
	This removes the first argument from the arguments vector and shifts
	the remaining arguments down by one.
 */
shiftArguments:	() =
	{
	if	(|arguments > 0){
		x:	[:] [:] char;

		x = arguments;
		arguments = x[1:];
		}
	}

	};

/*
	This function packages up any remaining arguments and creates a
	string suitable for passing to a spawn call.  The memory of the return
	value should be freed by the caller.
 */
argumentString:	public	(a: [:] [:] char) [:] char =
	{
	i, j:		int;
	len:		Size;
	s, targ:	[:] char;

	if	(|a == 0)
		return new [0] char;
	for	(i = 0, len = |a - 1; i < |a; i++)
		len += |a[i];
	s = new [len] char;
	for	(i = 0, j = 0; i < |a; i++){
		if	(i){
			s[j] = 0;
			j++;
			}
		targ = s[j:|a[i]];
		targ [:]= a[i];
		j += |a[i];
		}
	|s = len;
	return s;
	}
/*
------------------------------------------------------------------------------
		Exceptions

	Exception handling is done using a linked list of exception frames
	that are actually laced through the execution stack of a thread.
	The head of that list is the _Thread->exceptionFrame pointer.
 */
Trap:	public	type	{
	private:

	stuff:		byte;			// give it some substance

	public:
/*
	Note: this code is VERY VERY VERY sensitive to the code generated
	by the compiler.  The essential problem is to be sure that no 
	references to EBP are generated inside the loop, that the value of
	xf is not needed after the call to the exception handler and that
	the two pop instructions correspond to the register variables picked
	by the compiler for vx and self respectively (also that the 
	arguments to the handler are passed on the stack in the exact
	order the pop's expect.
 */
raise:	(...) =
	{
	va:	ArgumentList;
	vx:	unsigned;

	va = ...;
	vx = *ref unsigned(&va);
	while	(_Thread->exceptionFrame){
		xf:	ref _ExceptionFrame;

		xf = _Thread->exceptionFrame;
		_Thread->exceptionFrame = xf->next;
		_EBP = xf->bp;
		xf->addr(self, vx);
		_emit(0x59);			// pop ECX (vx)
		_emit(0x5e);			// pop ESI (self)
		}
	_emit(0x9a, _null, _GDT_RAISE);
	}

};
/*
	This is the object type that an exception clause can name to store
	exception context information for later review.
 */
ExceptionContext:	public	type	packed	{
	public:

	raised:			ref Trap;
	context:		ArgumentList;
	initialContext:	private	ArgumentList;

returnAddress:	() pointer =
	{
	return (*ref ref pointer(&initialContext))[-2];
	}

	};

_ExceptionFrame:	public	type	packed {
	public:

	next:		ref _ExceptionFrame;
	addr:		ref (ref Trap, unsigned);
	bp:		unsigned;
	sp:		unsigned;
	};
/*
------------------------------------------------------------------------------
		External message interface object

	This must be the base class for any type defining any gate functions.
	The compiler will create a GateMethodTable and will automatically
	set the value of the '__td__' member to point to it.
 */
External:	public	type	{
	visible:

	__td__:			ref GateMethodTable;
	messageHeader:		ref MessageHeader;
	objectId:		ref far External;

	public:

		// Uncatchable kill

kill:			gate!	() = { abort(int(&kill)); }

		// Synchronous interrupts

illegalInstruction:	gate!	() = { abort(int(&illegalInstruction)); }
memoryError:		gate!	() = { abort(int(&memoryError)); }
pageFault:		gate!	() = { abort(int(&pageFault)); }
arrayBounds:		gate!	() = { abort(int(&arrayBounds)); }
systemCallError:	gate!	() = { abort(int(&systemCallError)); }
mathError:		gate!	() = { abort(int(&mathError)); }
integerOverflow:	gate!	() = { abort(int(&integerOverflow)); }
rejectedMessage:	gate!	(code: int) = { rejectTrap raise(code); }
interruptedMessage:	gate!	() = { interruptTrap raise(); }

		// Asynchronous interrupts next

powerFailure:		gate!	() = { abort(int(&powerFailure)); }
hangup:			gate!	() = { abort(int(&hangup)); }
attention:		gate!	() = { abort(int(&attention)); }
quit:			gate!	() = { abort(int(&quit)); }
brokenSend:		gate!	() = { abort(int(&brokenSend)); }
alarmExpired:		gate!	() = { abort(int(&alarmExpired)); }

start:	gate	() =
	{
	}

childExit:	gate	(exitCode: ExitCode) =
	{
	}

//	These following two functions return TRUE if the operation is
//	allowed, FALSE otherwise

lastClose:	gate	() boolean =
	{
	return TRUE;
	}

close:	gate	() boolean =
	{
	return TRUE;
	}

copy:	gate	() ref far External =
	{
	return 0;
	}

dup:	gate	() =
	{
	}
/*
	This is called by the kernel whenever a thread dies in the same arena
	as the receiver.  The receiver will arrange for the memory to be
	recovered.
 */
_reclaimThreadContext:	gate	(p: Size) =
	{
	if	(p)
		_threadReclaim(pointer(p));
	}

__spare2:	gate	() =
	{
	}

__spare3:	gate	() =
	{
	}

__spare4:	gate	() =
	{
	}

__spare5:	gate	() =
	{
	}

__spare6:	gate	() =
	{
	}

__spare7:	gate	() =
	{
	}

__spare8:	gate	() =
	{
	}
/*
	This function returns non-zero when there are messages waiting,
	zero otherwise.
 */
senseMessages:	() int =
	{
	_EBX = unsigned(objectId);
	_emit(0x9a, _null, _GDT_SENSEMESSAGES);
	}

loop:	() =
	{
	wait(EXT_LOOP_FOREVER);
	}

wait:	(func: pointer) =
	{
	buf:		ref byte;
	mark:		ref byte;
	f:		ref GateDescriptor;
	i, fparms:	int;
	index:		unsigned[32];
	len:		int;
	mh:		MessageHeader;
	nextHeader:	ref MessageHeader;

	mark = pointer(_ESP);
	nextHeader = messageHeader;
	for	(;;){
		_ESP = unsigned(mark);
		i = _receive(&mh);
		if	(i < 0)
			continue;
		messageHeader = &mh;
		index = mh.func - __td__->funcBase;
		if	(index >= __td__->gateCount){
			_reject(mh.sequence, ERRINVALIDFUNC);
			continue;
			}
		f = &__td__->funcs[index];
		if	(mh.rights & f->accessMask == 0){
			_reject(mh.sequence, ERRPERMISSION);
			continue;
			}
		if	(f->fptr == 0){
			_reject(mh.sequence, ERRINVALIDFUNC);
			continue;
			}
		if	(mh.len > IMMED_MAX)
			buf = alloc(mh.len);
		else	{
			len = (mh.len + 3) & ~3;
			_ESP -= len;
			buf = pointer(_ESP);
			}
		_readText(mh.sequence, 0, buf, mh.len);
		try	{
			f->fptr(self, buf);
			}
		except	{
			if	(len > IMMED_MAX)
				delete buf;
			messageHeader = nextHeader;
			_reject(mh.sequence, ERREXCEPTION);
			continue;
			}
		_reply(mh.sequence, 0, 0);
		if	(len > IMMED_MAX)
			delete buf;
		if	(func == pointer(mh.func) ||
			 func == EXT_WAIT_FOR_ONE){
			break;
			}
		}
	messageHeader = nextHeader;
	}

_signal:	(seq: _Sequence) =
	{
	buf:		ref byte;
	mark:		ref byte;
	f:		ref GateDescriptor;
	len, i, fparms:	int;
	index:		unsigned[32];
	mh:		MessageHeader;

	i = signalInfo(seq, &mh);
	if	(i < 0)
		return;
	mh.next = messageHeader;
	messageHeader = &mh;
	index = mh.func - __td__->funcBase;
	if	(index >= __td__->gateCount){
		_reject(mh.sequence, ERRINVALIDFUNC);
		return;
		}
	f = &__td__->funcs[index];
	if	(mh.rights & f->accessMask == 0){
		_reject(mh.sequence, ERRPERMISSION);
		return;
		}
	if	(f->fptr == 0){
		_reject(mh.sequence, ERRINVALIDFUNC);
		return;
		}
	len = (f->parms + 3) & ~3;
	if	(len > IMMED_MAX)
		len = IMMED_MAX;
	_ESP -= len;
	buf = pointer(_ESP);
	_readText(mh.sequence, 0, buf, len);
	try	{
		f->fptr(self, buf);
		messageHeader = mh.next;
		_reply(mh.sequence, 0, 0);
		}
	except	{
		messageHeader = mh.next;
		_reject(mh.sequence, ERREXCEPTION);
		continue;
		}
	}

receive:	(mh: ref MessageHeader) int =
	{
	i:	int;

	i = _receive(mh);
	if	(i < 0)
		return i;
	mh->next = messageHeader;
	messageHeader = mh;
	}

discardMessage:	() =
	{
	if	(messageHeader)
		messageHeader = messageHeader->next;
	}

kernelLocal:	(mh: ref MessageHeader, buf: pointer) =
	{
	index:	unsigned[32];
	fd:	ref GateDescriptor;

	mh->next = messageHeader;
	messageHeader = mh;
	index = mh->func - __td__->funcBase;
	if	(index >= __td__->gateCount){
		_reject(mh->sequence, ERRINVALIDFUNC);
		return;
		}
	fd = &__td__->funcs[index];
	if	(mh->rights & fd->accessMask == 0){
		_reject(mh->sequence, ERRPERMISSION);
		return;
		}
	try	{
		fd->fptr(self, buf);
		}
	except	{
		_reject(mh->sequence, ERREXCEPTION);
		}
	messageHeader = mh->next;
	}

kernelRejected:	() =
	{
	index:	unsigned[32];
	fd:	ref GateDescriptor;
	mh:	MessageHeader;

	mh.rights = 0xFFFF;
	mh.sender = 0;
	mh.expected = 0;
	mh.len = 0;
	mh.func = int(&rejectedMessage);
	mh.next = messageHeader;
	messageHeader = &mh;
	index = mh.func - __td__->funcBase;
	fd = &__td__->funcs[index];
	try	{
		fd->fptr(self, 0);
		}
	except	{
		_reject(mh.sequence, ERREXCEPTION);
		}
	messageHeader = mh.next;
	}

kernelRemote:	(mh: ref MessageHeader, 
				buf: pointer, firstPacketLength: int) =
	{
	index:	unsigned[32];
	fparms:	int;
	fd:	ref GateDescriptor;

	mh->next = messageHeader;
	messageHeader = mh;
	index = mh->func - __td__->funcBase;
	if	(index >= __td__->gateCount){
		_reject(mh->sequence, ERRINVALIDFUNC);
		return;
		}
	fd = &__td__->funcs[index];
	if	(mh->rights & fd->accessMask == 0){
		_reject(mh->sequence, ERRPERMISSION);
		return;
		}
	if	(fd->parms == unsigned[16](~0) || 
		 mh->len < fd->parms)
		fparms = mh->len;
	else
		fparms = fd->parms;
	if	(fparms > firstPacketLength){
		_ESP -= fparms;
		_ESP &= ~3;
		buf = pointer(_ESP);
		_readText(mh->sequence, 0, buf, fparms);
		}
	try	{
		fd->fptr(self, buf);
		}
	except	{
		_reject(mh->sequence, ERREXCEPTION);
		}
	messageHeader = mh->next;
	}

replyGeneric:	(buf: pointer, len: int) =
	{
	_reply(messageHeader->sequence, buf, len);
	}

replyPartial:	(buf: pointer, len: int) =
	{
	_replyPartial(messageHeader->sequence, buf, len);
	}

readText:	(offset: unsigned, buf: pointer, len: int) int =
	{
	return _readText(messageHeader->sequence, offset, buf, len);
	}

discardText:	() =
	{
	_discardText(messageHeader->sequence);
	}

reject:	(code: int) =
	{
	_reject(messageHeader->sequence, code);
	}

	};

EXT_LOOP_FOREVER:	public	const pointer = pointer(-1);
EXT_WAIT_FOR_ONE:	public	const pointer = pointer(-2);

signalInfo:	(seq: _Sequence, mh: ref MessageHeader) int =
	{
	_EDX = int(mh);
	_BX = seq;
	_emit(0x9a, _null, _GDT_SIGNALINFO);
	return _EAX;
	}

probeObject:	public	(o: ref far External) ref far External =
	{
	_EBX = int(o);
	_emit(0x9a, _null, _GDT_PROBEOBJECT);
	}

rejectTrap:	public	Trap;			// You were rejected
interruptTrap:	public	Trap;			// You were interrupted

IMMED_MAX:	public	const	int = 256;

MessageHeader:	public	type	packed	{
	public:

	next:		ref MessageHeader;
	id:		MessageId;		// system message id
	rights:		unsigned[16];
	sequence:	_Sequence;
	sender:		ref far External;	// sender's object id
	expected:	unsigned[32];		// expected length of reply
	len:		unsigned[32];		// length of send
	func:		unsigned[32];		// function called
	};

ObjectId:	public	type	signed[32];
MessageId:	public	type	signed[32];

ErrorCode:	public	type	int = {
	SUCCESS,			// Success
	ERRINVALIDFUNC		= -1,	// Invalid function number
	ERRPERMISSION		= -2,	// Permission denied
	ERREXCEPTION		= -3,	// Exception raised
	};

InterruptFrame:	public	type	packed	{
	public:
	gs:			unsigned[16];
	fs:			unsigned[16];
	es:			unsigned[16];
	ds:			unsigned[16];
	edi:			unsigned[32];
	esi:			unsigned[32];
	ebp:			unsigned[32];
	esp:			unsigned[32];
	ebx:			unsigned[32];
	edx:			unsigned[32];
	ecx:			unsigned[32];
	eax:			unsigned[32];
	eip:			unsigned[32];
	cs:			unsigned[16];
	extra:			_Sequence;
	eflags:			unsigned[32];

calledFromUserMode:	() boolean =
	{
	if	(eflags & 0x20000 ||			// v8086 mode
		 cs & RING == USER_RING)		// ring == 3
		return TRUE;
	else
		return FALSE;
	}

	};

_Sequence:	public	type	unsigned[16];

USER_RING:	const	int = 3;
RING:		const	int = 0x0003;

messageTrap:	public	Trap;
/*
	The _threadCount_ is the count of the total number of separate
	process threads currently alive in this arena.  The cleanup functions
	are only called when the number drops to zero.
 */
_threadList:	public	ref _ThreadContext = &_thread0;
_Thread:	public	ref _ThreadContext = &_thread0;
_thread0:		_ThreadContext;
threadTrap:	public	Trap;

mainExternal:	public	(p: ref External) =
	{
	_Thread declareObject_(p);
	}

myExternal:	public	() ref External =
	{
	return _Thread->myThread;
	}

	// The Parasol compiler looks for '_ThreadContext' explicitly.
	// So we make it private to avoid name space pollution.

_ThreadContext:	public	type	{
	public:

	exceptionFrame:	ref _ExceptionFrame;
	myThread:	ref External;
	myStack:	ref byte;
	endStack:	ref byte;
	currentHeap:	ref Heap;
	threadHeap:	ref Heap;
	next:		ref _ThreadContext;
	func:		ref ();

declareObject_:	(p: ref External) =
	{
	if	(myThread)
		p->objectId = myThread->objectId;
	else
		p->objectId = 0;
	myThread = p;
	}

	};

_threadCount_:		public	int = 1;

THREAD_STACK:	const	int = 0x2000;		// use an 8K stack

thread:	public	(ex: ref External, func: ref ()) ref far External =
	{
	_threadCount_++;
	_threadLaunch(ex, &threadStartup, THREAD_STACK, func);
	return ex->objectId;
	}
/*
	This is where threads start.  The value of _Thread points at the
	running thread.
 */
threadStartup:	() =
	{
	if	(_Thread->func)
		_Thread->func();
	_Thread->myThread loop();
	}

_LatchValues:	public	type	int =
	{
	_LATCH_OPEN,		// open
	_LATCH_CLOSED,		// closed, but no one waiting
	_LATCH_WAITERS		// closed, processes waiting
	};

Lock:	public	type	{
	latch:	_LatchValues;

	public:

enter:	() =
	{
	_lock_enter(&latch);
	}

leave:	() =
	{
	_lock_leave(&latch);
	}

	};

Semaphore:	public	type	{
	index:		int;

	public:

initialize:	(c: int) = 	{ index = _semaphoreConstruct(c); }
down:		() int =	{ return _semaphoreDown(index); }
downNowait:	() boolean =	{ return _semaphoreDownNowait(index); }
up:		() =		{ _semaphoreUp(index); }
wakeup:		() =		{ _semaphoreWakeup(index); }
empty:		() =		{ _semaphoreEmpty(index); }
close:		() =		{ _semaphoreClose(index); }

	};
/*
	The funcBase value is designed to insure that the minimum function
	value is this number.  The ALYS kernel reserves message function
	id's below 0x100 for system control messages.  The compiler is
	allowed to set this value (to make future compatibility possibly
	easier).  For example, if I change the fence point on reserved id's.

	The gateCount is just the count of the number of functions in the 
	table.

	The function descriptors point to the gate functions themselves
	(which accept a special function interface).

	In effect, other the the self pointer, all other parameters are 
	stored indirectly, with only a pointer to the argument brick on the
	stack.

	The parms value is set to some value other than 0xFFFF to indicate
	a maximum argument list size.  If the supplied message has more data
	than the function expects, the excess is disregarded.

	The accessMask is a sixteen bit mask that describes the set of
	access rights bits that have permission to use this function.  The
	value has a bit on if that right is needed to use the function.
 */
GateMethodTable:	type	packed	{
	public:

			unsigned[32];
	funcBase:	unsigned[32];
			unsigned[16];
	gateCount:	unsigned[16];
	funcs:		[] GateDescriptor;
	};

GateDescriptor:	type	packed	{
	public:

	fptr:		ref (ref External, pointer) int;
	parms:		unsigned[16];
	accessMask:	AccessRights;
	};

AccessRights:	public	type	unsigned[16];

AR_ANY:		public	const	AccessRights = ~0;
AR_NONE:	public	const	AccessRights = 0;
/*
------------------------------------------------------------------------------
		Heap Management

	The heap begins at the end of the static data region of the program.
	It is located by _heapbase_, which is set by the linker.  The
	_brklvl variable is the current top of heap marker.  It moves as the
	heap is manipulated.

	Multiple heap support is provided through the two variables: Heap
	and CurrentHeap.  The arena Heap is defined by Heap, while whatever
	is the currently active subheap is CurrentHeap.  Note that CurrentHeap
	is usually set to the same value as Heap.
 */
_brklvl:		public	pointer;
_heapbase_:		public	[1] char = $3;

alloc:	public	(n: unsigned) pointer =
	{
	return _Thread->currentHeap alloc(n);
	}

stringDup:	public	(s: [:] char) [:] char =
	{
	s2:	[:] char;

	s2 = new [|s] char;
	s2 [:]= s;
	return s2;
	}

_free:	public	(p: pointer) =
	{
	_Thread->currentHeap _free(p);
	}

currentHeap:	public	() ref Heap =
	{
	return _Thread->currentHeap;
	}

threadHeap:	public	() ref Heap =
	{
	return _Thread->threadHeap;
	}

Heap:	public	type	{
	public:

activate:	() ref Heap =
	{
	ch:	ref Heap;

	ch = _Thread->currentHeap;
	_Thread->currentHeap = self;
	return ch;
	}

stringDup:	(s: [:] char) [:] char =
	{
	s2:	[:] char;

	s2 = self new [|s] char;
	s2 [:]= s;
	return s2;
	}

alloc:	dynamic	(Size) pointer =
	{
	memTrap raise(H_ALLOC);
	}

_free:	dynamic	(pointer) =
	{
	memTrap raise(H_FREE);
	}

free:	dynamic	(pointer, pointer) =
	{
	memTrap raise(H_FREE);
	}

freeAll:	dynamic	() =
	{
	memTrap raise(H_FREEALL);
	}

freeListSize:	dynamic	() Size =
	{
	memTrap raise(H_FREELISTSIZE);
	}

	};

memTrap:	public	Trap;

MemTrapCauses:	public	type	int = {
	H_ALLOC,
	H_FREE,
	H_FREEALL,
	H_FREELISTSIZE,
	H_NOMEMORY,
	H_CORRUPT
	};
/*
------------------------------------------------------------------------------
		Miscellany

	These are various handy values for the kernel or for other processing.

	The _IDT_ and _GDT_ are the IDT and GDT tables for the kernel.  They
	are reserved in the image and initially filled in by the boot program.
 */
_idt_:			public	[8 * 256] char = $5;
_gdt_:			public	[_GDT_END] char = $4;
/*
------------------------------------------------------------------------------
		Variable argument lists
 */
ArgumentList:	public	type	{
	nextArgument:	ref byte;

nextArg:	public	(dest: pointer, len: unsigned) =
	{
	memCopy(dest, nextArgument, len);
	nextArgument += (len + 3) & ~3;		// advance by groups of 4
	}

	};

/*
------------------------------------------------------------------------------
		Character conversion

	These functions convert alphabetic characters to upper or lower case.
 */
tolower:	public	(c: int) int =
	{
	if	(isupper(c))
		return c + 'a' - 'A';
	else
		return c;
	}

toupper:	public	(c: int) int =
	{
	if	(islower(c))
		return c + 'A' - 'a';
	else
		return c;
	}
/*
------------------------------------------------------------------------------
		Character classification

	These functions classify an integer according to whether it is a
	particular class of character.  The integer must be either a
	representable character or -1 (EOF).  Each function returns non-zero
	if the character fits the predicate being tested, zero otherwise.
 */

isalnum:	public	(c: int) int =
	{
	return(_ctype[c + 1] & (IS_DIG | IS_UPP | IS_LOW));
	}

isalpha:	public	(c: int) int =
	{
	return(_ctype[c + 1] & (IS_UPP | IS_LOW));
	}

isascii:	public	(c: int) int =
	{
	return(c < 0x80);
	}

iscntrl:	public	(c: int) int =
	{
	return(_ctype[c + 1] & IS_CTL);
	}

isdigit:	public	(c: int) int =
	{
	return(_ctype[c + 1] & IS_DIG);
	}

isgraph:	public	(c: int) int =
	{
	return unsigned(c - 0x21) <= 0x7e - 0x21;
	}

islower:	public	(c: int) int =
	{
	return(_ctype[c + 1] & IS_LOW);
	}

isprint:	public	(c: int) int =
	{
	return unsigned(c - 0x20) <= 0x7e - 0x20;
	}

ispunct:	public	(c: int) int =
	{
	return(_ctype[c + 1] & IS_PUN);
	}

isspace:	public	(c: int) int =
	{
	return(_ctype[c + 1] & IS_SP);
	}

isupper:	public	(c: int) int =
	{
	return(_ctype[c + 1] & IS_UPP);
	}

isxdigit:	public	(c: int) int =
	{
	return(_ctype[c + 1] & (IS_DIG | IS_HEX));
	}

isFileChar:	public	(c: byte) int =
	{
	if	(c >= 128)
		return 1;
	return(_ctype[c + 1] & (IS_FNM | IS_DIG | IS_LOW | IS_UPP));
	}

CharMasks:	type	byte = {
			IS_SP  = 0x01,		/* is space */
			IS_DIG = 0x02,		/* is digit */
			IS_UPP = 0x04,		/* is upper case */
			IS_LOW = 0x08,		/* is lower case */
			IS_HEX = 0x10,		/* [A-F] or [a-f] */
			IS_CTL = 0x20,		/* Control */
			IS_PUN = 0x40,		/* punctuation */
			IS_FNM = 0x80		// DOS filename char
		};

_ctype:		const [257] CharMasks = [
	0,

	IS_CTL,		IS_CTL,		IS_CTL,		IS_CTL,
	IS_CTL,		IS_CTL,		IS_CTL,		IS_CTL,
	IS_CTL,		IS_CTL|IS_SP,	IS_SP|IS_CTL,	IS_CTL,
	IS_CTL,		IS_CTL,		IS_CTL,		IS_CTL,

	IS_CTL,		IS_CTL,		IS_CTL,		IS_CTL,
	IS_CTL,		IS_CTL,		IS_CTL,		IS_CTL,
	IS_CTL,		IS_CTL,		IS_CTL,		IS_CTL,
	IS_CTL,		IS_CTL,		IS_CTL,		IS_CTL,

	IS_SP|IS_FNM,	IS_PUN|IS_FNM,	IS_PUN,		IS_PUN|IS_FNM,
	IS_PUN|IS_FNM,	IS_PUN|IS_FNM,	IS_PUN|IS_FNM,	IS_PUN|IS_FNM,
	IS_PUN|IS_FNM,	IS_PUN|IS_FNM,	IS_PUN|IS_FNM,	IS_PUN,
	IS_PUN,		IS_PUN|IS_FNM,	IS_PUN,		IS_PUN,

	IS_DIG,		IS_DIG,		IS_DIG,		IS_DIG,
	IS_DIG,		IS_DIG,		IS_DIG,		IS_DIG,
	IS_DIG,		IS_DIG,		IS_PUN,		IS_PUN,
	IS_PUN,		IS_PUN,		IS_PUN,		IS_PUN|IS_FNM,

	IS_PUN|IS_FNM,	IS_UPP|IS_HEX,	IS_HEX|IS_UPP,	IS_UPP|IS_HEX,
	IS_UPP|IS_HEX,	IS_UPP|IS_HEX,	IS_UPP|IS_HEX,	IS_UPP,
	IS_UPP,		IS_UPP,		IS_UPP,		IS_UPP,
	IS_UPP,		IS_UPP,		IS_UPP,		IS_UPP,

	IS_UPP,		IS_UPP,		IS_UPP,		IS_UPP,
	IS_UPP,		IS_UPP,		IS_UPP,		IS_UPP,
	IS_UPP,		IS_UPP,		IS_UPP,		IS_PUN,
	IS_PUN,		IS_PUN,		IS_PUN|IS_FNM,	IS_PUN|IS_FNM,

	IS_PUN|IS_FNM,	IS_LOW|IS_HEX,	IS_HEX|IS_LOW,	IS_LOW|IS_HEX,
	IS_LOW|IS_HEX,	IS_LOW|IS_HEX,	IS_LOW|IS_HEX,	IS_LOW,
	IS_LOW,		IS_LOW,		IS_LOW,		IS_LOW,
	IS_LOW,		IS_LOW,		IS_LOW,		IS_LOW,

	IS_LOW,		IS_LOW,		IS_LOW,		IS_LOW,
	IS_LOW,		IS_LOW,		IS_LOW,		IS_LOW,
	IS_LOW,		IS_LOW,		IS_LOW,		IS_PUN|IS_FNM,
	IS_PUN,		IS_PUN|IS_FNM,	IS_PUN|IS_FNM,	IS_CTL,

	0, 0		// ...
	];
/*
------------------------------------------------------------------------------
		Persistent object formats

	The compiler generates type description tables.  An image is an
	abstract data structure that acts as an interface to disk files
	or other serial data structures (such as a network messages).  The
	notion is that an object and its attached data structures are stored
	into an image, which includes a folder structure that allows an
	image to contain several objects and even sub-folders of objects.
 */
Image:	public	type	{
	public:

save:		dynamic	() =
	{
	}

read:		dynamic	(nm: [:] char, tp: ref _TypeDescriptor) pointer =
	{
	return 0;
	}

test:		dynamic	(nm: [:] char) ref _TypeDescriptor =
	{
	}

write:		dynamic	(nm: [:] char, tp: ref _TypeDescriptor, v: pointer) =
	{
	}

erase:		dynamic	(nm: [:] char) =
	{
	}

	};

_typeList:	public	const	[1] _TypeDescriptor;

_TypeDescriptor:	public	type	packed	{
	public:

	vectorOffset:	int;			// Dynamic vector offset
	size:		Size;			// Size of the object
	typeName:	[:] char;		// Type name string
	items:		[:] _LinkItem;		// The link items table
	};

_LinkItem:	public	type	packed	{
	public:

	repeat:		unsigned;
	offset:		Size;
	refTo:		ref _TypeDescriptor;
	};

//
//	The repeat field holds an encoded value.  The low order three bits are
//	the item kind (given below).  The remaining bits are ignored except
//	for the IK_ARRAY type for which the bits are the array bounds.
//
//	Items are only generated for pointer fields.  An array of non-
//	pointer types has no item entry.
//
_ItemKinds:	public	type	unsigned = {
	_IK_REF,				// ref member
	_IK_LINK,				// link member
	_IK_MEMBER,				// embedded class member
	_IK_ARRAY				// array member
	};
