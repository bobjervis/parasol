/*
   Copyright 2015 Robert Jervis

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
 */
package(name: core:parasollanguage.org, preserveAnonymousUnits: true) {
	file(name: *.p, src: src/lib)
	file(name: root.p, src: lib)
	init(placement: first){
		aa_memory.p
		aa_thread.p
		ab_logger.p
		ac_locale.p
	}
	init(placement: last) {
		
	}
}

target(os: linux, cpu: x86-64) {


	package(name: install:parasollanguage.org, manifest: false) {
		folder(name: bin) {
			file(name: dumppxi, src: bin)
			link(name: libparasol.so, target: libparasol.so.1)
			elf(name: libparasol.so.1, target: build/libparasol.so.1, makefile: src/C++/makefile) {
				file(name: *.h, src: src/C++)
				file(name: executionContext.cc, src: src/C++)
				file(name: pxi.cc, src: src/C++)
			}
			file(name: paradoc, src: bin)
			file(name: pbuild, src: bin)
			file(name: pc, src: bin)
			file(name: pcontext, src:bin)
			file(name: pcurl, src: bin)
			file(name: phost, src: bin)
			elf(name: parasolrt, target: build/parasolrt, makefile: src/C++/makefile) {
				file(name: main.cc, src: src/C++)
				file(name: *.h, src: src/C++)
			}
			pxi(name: x86-64-lnx.pxi, main: src/pc/main.p, target: x86-64-lnx)
		}
		include(type: package, name: core:parasollanguage.org)
		folder(name: src) {
			folder(name: paradoc) {
				file(name: *.p, src: src/paradoc)
			}
			folder(name: pbuild) {
				file(name: *.p, src: src/pbuild)
				folder(name: lib) {
					file(name: *.p, src: src/pbuild/lib)
				}
			}
			folder(name: pc) {
				file(name: *.p, src: src/pc)
			}
			folder(name: pcontext) {
				file(name: *.p, src: src/pcontext)
			}
			folder(name: util) {
				file(name: *.p, src: src/util)
			}
		}
		folder(name: template) {
			file(name: *, src: template)
		}
	}

	tests(suite: update_git) {
		include(suite: full)
	
		on_pass() {
			set +v
			if ! diff -q build/install\:parasollanguage.org/bin/x86-64-lnx.pxi bin/x86-64-lnx.pxi
			then
				echo replacing bin/x86-64-lnx.pxi
			    cp build/install\:parasollanguage.org/bin/x86-64-lnx.pxi bin/x86-64-lnx.pxi
			else
				echo skipping x86-64-lnx.pxi
			fi
			if ! diff -q build/parasolrt bin/parasolrt
			then
				echo replacing bin/parasolrt
			    cp build/parasolrt bin/parasolrt
			else
				echo skipping parasolrt
			fi
			if ! diff -q build/libparasol.so.1 bin/libparasol.so.1
			then
				echo replacing bin/libparasol.so.1
			    cp build/libparasol.so.1 bin/libparasol.so.1
				ln -sfT libparasol.so.1 bin/libparasol.so
			else
				echo skipping libparasol.so.1
			fi
		}
	}

	tests(suite: freshen) {
		on_pass() {
			set +v
			if ! diff -q build/install\:parasollanguage.org/bin/x86-64-lnx.pxi bin/x86-64-lnx.pxi
			then
				echo replacing bin/x86-64-lnx.pxi
			    cp build/install\:parasollanguage.org/bin/x86-64-lnx.pxi bin/x86-64-lnx.pxi
			else
				echo skipping x86-64-lnx.pxi
			fi
			if ! diff -q build/parasolrt bin/parasolrt
			then
				echo replacing bin/parasolrt
			    cp build/parasolrt bin/parasolrt
			else
				echo skipping parasolrt
			fi
			if ! diff -q build/libparasol.so.1 bin/libparasol.so.1
			then
				echo replacing bin/libparasol.so.1
			    cp build/libparasol.so.1 bin/libparasol.so.1
				ln -sfT libparasol.so.1 bin/libparasol.so
			else
				echo skipping libparasol.so.1
			fi
		}
	}
}

target(os: windows, cpu: x86-64) {
	package(name: install:parasollanguage.org, manifest: false) {
		folder(name: bin) {
			file(name: genhdr.bat, src: bin)
			exe(name: parasol.exe) {
				...
			}
			file(name: pc.bat, src: bin)
			file(name: runets.bat, src: bin)
			file(name: unit.bat, src: bin)
			pxi(name: x86-64-win.pxi, main: src/pc/main.p. target: x86-64-win) {
				file(name: *.p, src: src/lib)
			}
		}
		include(type: package, name: core:parasollanguage.org)
		folder(name: src) {
			folder(name: paradoc) {
				file(name: *.p, src: src/paradoc)
			}
			folder(name: pbuild) {
				file(name: *.p, src: src/pbuild)
				folder(name: lib) {
					file(name: *.p, src: src/pbuild/lib)
				}
			}
			folder(name: pc) {
				file(name: *.p, src: src/pc)
			}
			folder(name: pcontext) {
				file(name: *.p, src: src/pcontext)
			}
			folder(name: root) {
				file(name: root.p, src: lib)
			}
			folder(name: util) {
				file(name: *.p, src: src/util)
			}
		}
	}

	tests(suite: update_git) {
		include(suite: full)
	
		on_pass() {
			fc /b build\\x86-64-win.pxi bin\\x86-64-win.pxi
			if not errorlevel 0 copy build\\x86-64-win.pxi bin\\x86-64-win.pxi
			fc /b build\\parasol.exe bin\\parasol.exe
			if not errorlevel 0 copy build\\parasol.exe bin\\parasol.exe
			fc /b build\\parasol.dll bin\\parasol.dll
			if not errorlevel 0 copy build\\parasol.dll bin\\libparasol.dll
		}
	}

	tests(suite: freshen) {
		on_pass() {
			fc /b build\\x86-64-win.pxi bin\\x86-64-win.pxi
			if not errorlevel 0 copy build\\x86-64-win.pxi bin\\x86-64-win.pxi
			fc /b build\\parasol.exe bin\\parasol.exe
			if not errorlevel 0 copy build\\parasol.exe bin\\parasol.exe
			fc /b build\\parasol.dll bin\\parasol.dll
			if not errorlevel 0 copy build\\parasol.dll bin\\libparasol.dll
		}
	}}

tests(suite: new_tests) {
	ets(name: test/scripts/new_tests.ets)
}

tests(suite: unit) {
}

tests(suite: full) {
	include(suite: unit)

	ets(name: test/scripts/parasol_tests.ets)
}

command(name: bdiff, main: src/util/bdiff.p)
command(name: dumppxi, main: src/util/dumppxi.p)
command(name: genHeader, main: src/util/genHeader.p)
command(name: genSqlProxy, main: src/util/genSqlProxy.p)
command(name: hex, main: src/util/hex.p)
command(name: paradoc, main: src/paradoc/paradoc.p)
command(name: pbuild, main: src/pbuild/main.p)
command(name: pcontext, main: src/pcontext/main.p)
command(name: pcurl, main: src/util/pcurl.p)
command(name: ucdParser, main: src/util/ucdParser.p)
command(name: phost, main: src/util/phost.p)
command(name: etsTests, main: test/drivers/etsTests.p)

