include	alys;
include	filesys, time;
include	file;
include	error, format;

include	sbuffer;
include	errmsg;
include	hash;
include	preparse;
include	string;

ID_LENGTH:	const	int = 32;

EchoPragmas:	boolean = FALSE;
KeepOutput:	boolean = FALSE;
OutputStream:	stream;

main:	entry	() =
	{
	cp:	[:] char;
	i:		int;

	if	(|commandLine.arguments == 0)
		helpScreen();
	for	(i = 0; i < |commandLine.arguments; i++){
		id:	ref identifier;

		cp = commandLine.arguments[i];
		if	(cp[0] == '-'){
			switch	(cp[1]){
			case	'C':
				if	(cp[2] == 'L' && cp[3] == 0)
					LineComments = TRUE;
				else if	(cp[2] != 0){
					printf("Extra characters in option C\n");
					helpScreen();
					}
				else
					NestedComments = TRUE;
				break;

			case	'D':
//				argumentDefine(cp + 2);
				break;

			case	'I':
				cp = cp[2:];
				includeDirectory create(cp);
				break;

			case	'U':
				cp = cp[2:];
				id = identifier create(cp);
				id undefine();
				break;

			case	'e':
				KeepOutput = TRUE;
				break;

			case	'p':
				EchoPragmas = TRUE;
				break;

			default:
				printf("Unknown option: '%S'\n", cp);
				helpScreen();
				}
			}
		else if	(i != |commandLine.arguments - 1)
			helpScreen();
		else
			break;
		}
	if	(i >= |commandLine.arguments){
		printf("Filename missing\n");
		helpScreen();
		}

	in:		[:] char;
	out:		[:] char;
	in = cp;
	out = newExtension(in, ".i");
	if	(!hasExtension(in))
		in = newExtension(in, ".c");
	i = OutputStream create(out, AR_READ|AR_WRITE);
	if	(i){
		printf("Couldn't create output file '%S': %S\n", out,
						cmdError(i));
		exit(1);
		}
	defineStandardSymbols();
	try expandFile(in);
	OutputStream close();
	if	(ErrorCount){
		if	(!KeepOutput)
			FileSystem unlink(out);
		exit(EX_FAIL);
		}
	else
		exit(EX_SUCCESS);
	}

sourceFile:	public	type	inherit	messageGenerator	{
	public:

	src:	ref sourceBuffer;
	name:	ref char;

objectName:	dynamic	() ref char =
	{
	return name;
	}

lineno:		dynamic	(o: fileOffset) int =
	{
	return src tellLine(o);
	}

	};

libraryInclude:	(in: [:] char) =
	{
	fpathBuf:	[MAXPATH] char;
	fpath:		[:] char;
	i:		ref includeDirectory;

	if	(Includes == 0){
		fpath = fpathBuf;
		fpath [:]= in;
		expandFile(fpath);
		return;
		}
	for	(i = Includes; i; i = i->next){
		fpath = makePath(fpathBuf, i->path, in, "");
		if	(FileSystem access(fpath, AR_READ) == SUCCESS){
			expandFile(fpath);
			return;
			}
		}
	error(ErrOpen, in);
	}

userInclude:	(in: [:] char) =
	{
	fpath:	[:] char;

	if	(FileSystem access(in, AR_READ) != SUCCESS)
		libraryInclude(in);
	else	{
		fpath[:] = in;
		expandFile(fpath);
		}
	}

Includes:	ref includeDirectory;
LastDir:	ref includeDirectory;

includeDirectory:	public	type	{
	public:

	next:		ref includeDirectory;
	path:		[:] char;

create:	factory	(cp: [:] char) =
	{
	self = new includeDirectory;
	path = new [|cp] char;
	path [:]= cp;
	next = 0;
	if	(Includes)
		LastDir->next = self;
	else
		Includes = self;
	LastDir = self;
	}

	};

expandFile:	(in: [:] char) =
	{
	sb:		ref sourceBuffer;
	saveObj:	ref messageGenerator;
	sf:		sourceFile;

	sb = sourceBuffer create(in);
	if	(sb == 0){
		error(ErrOpen, in);
		return;
		}
	sf = [ sb, in ];
	saveObj = CurrentContext.obj;
	CurrentContext.obj = &sf;
	while	(tryDirective(sb) || expandLine(sb))
		;
	CurrentContext.obj = saveObj;
	}

tryDirective:	(sb: ref sourceBuffer) boolean =
	{
	if	(isDirective(sb)){
		processDirective(accumulated(Accum), sb);
		return TRUE;
		}
	else
		return FALSE;
	}

isDirective:	(sb: ref sourceBuffer) boolean =
	{
	skipSpace(sb);
	c:	char;

	c = sb getc();
	if	(c != '#'){
		sb ungetc();
		return FALSE;
		}
	skipSpace(sb);

	cp:	ref char;

	clearAccumulation();
	for	(;;){
		c = sb getc();
		if	(c == EOF_MARK ||
			 c == '\n'){
			sb ungetc();
			break;
			}
		accumulate(c);
		if	(skipSpace(sb))
			break;
		}
	return TRUE;
	}

processDirective:	(s: [:] char, sb: ref sourceBuffer) =
	{
	c:	char;
	id:	ref identifier;
	i:	Size;
//	s:	[:] char;

	CurrentContext.offset = sb tell();
	if	(|s == 0)	// null directive
		return;
	else if	(stringCompare(s, "define") == 0){
		clearAccumulation();
		s = accumulateIdentifier(sb);
		id = identifier create(s);
		c = sb getc();
		if	(c == '('){
			args:	ref argument;

			skipSpace(sb);
			c = sb getc();
			if	(c == ')')
				args = 0;
			else	{
				sb ungetc();
				args = parseArguments(sb);
				if	(args == 0){
					error(ErrDefineArgSyntax);
					sb skipToEol();
					return;
					}
				}
			if	(!collectExpansion(sb, args)){
				sb skipToEol();
				return;
				}
			id define(Accum[:AccumPtr - Accum], args, TRUE);
			}
		else	{
			sb ungetc();
			if	(!collectExpansion(sb, 0)){
				sb skipToEol();
				return;
				}
			id define(Accum[:AccumPtr - Accum], 0, FALSE);
			}
		}
	else if	(stringCompare(s, "undef") == 0){
		clearAccumulation();
		s = accumulateIdentifier(sb);
		skipSpace(sb);
		c = sb getc();
		if	(c != '\n'){
			error(ErrJunkInDirective);
			sb skipToEol();
			return;
			}
		id = identifier create(s);
		id undefine();
		}
	else if	(stringCompare(s, "if") == 0){
		b:	boolean;
		cp:	ref char;

		skipSpace(sb);
		in: bufferSource = [ sb ];
		clearAccumulation();
		out: stringSink = [ 0 ];
		if	(!expandText(&in, &out)){
			sb skipToEol();
			return;
			}
		trimTrailingSpaces();
		if	(!constantExpression(Accum))
			skipLines(sb);
		}
	else if	(stringCompare(s, "elif") == 0){
		sb skipToEol();
		skipToEndif(sb);
		}
	else if	(stringCompare(s, "else") == 0){
		c = sb getc();
		if	(c != '\n'){
			error(ErrJunkInDirective);
			sb skipToEol();
			return;
			}
		skipToEndif(sb);
		}
	else if	(stringCompare(s, "endif") == 0){
		c = sb getc();
		if	(c != '\n'){
			error(ErrJunkInDirective);
			sb skipToEol();
			return;
			}
		}
	else if	(stringCompare(s, "ifdef") == 0){
		clearAccumulation();
		s = accumulateIdentifier(sb);
		skipSpace(sb);
		c = sb getc();
		if	(c != '\n'){
			error(ErrJunkInDirective);
			sb skipToEol();
			return;
			}
		id = identifier create(s);
		if	(!id->Expansion){
			if	(!skipLines(sb))
				error(ErrUnmatchedTest, "ifdef");
			}
		}
	else if	(stringCompare(s, "ifndef") == 0){
		clearAccumulation();
		s = accumulateIdentifier(sb);
		skipSpace(sb);
		c = sb getc();
		if	(c != '\n'){
			error(ErrJunkInDirective);
			sb skipToEol();
			return;
			}
		id = identifier create(s);
		if	(id isDefined()){
			if	(!skipLines(sb))
				error(ErrUnmatchedTest, "ifndef");
			}
		}
	else if	(stringCompare(s, "include") == 0){
		skipSpace(sb);
		in:	bufferSource = [ sb ];
		b:	boolean;
		cp:	ref char;

		clearAccumulation();
		out: stringSink = [ 0 ];
		if	(!expandText(&in, &out)){
			sb skipToEol();
			return;
			}
		i:	int;
		i = trimTrailingSpaces();

//		printf("include '%s'\n", Accum);
		if	(i < 2){
			error(ErrIncludeSyntax);
			return;
			}
		if	(Accum[0] == '<' &&
			 Accum[i - 1] == '>'){
			s:	[:] char;

			s = Accum[1:i - 1];
			libraryInclude(s);
			}
		else if	(Accum[0] == '"' &&
			 Accum[i - 1] == '"'){
			s:	[:] char;

			s = Accum[1:i - 1];
			userInclude(s);
			}
		else	{
			error(ErrIncludeSyntax);
			return;
			}
		}
	else if	(stringCompare(s, "line") == 0){
		sb skipToEol();
		}
	else if	(stringCompare(s, "error") == 0){
		clearAccumulation();
		for	(;;){
			if	(skipSpace(sb))
				accumulate(' ');
			c = sb getc();
			if	(c == EOF_MARK || c == '\n')
				break;
			accumulate(c);
			}
		fatal(ErrErrorDirective, Accum);
		}
	else if	(stringCompare(s, "pragma") == 0){
		if	(EchoPragmas){
			OutputStream printf("#pragma");
			for	(;;){
				if	(skipSpace(sb))
					OutputStream putc(' ');
				c = sb getc();
				if	(c == EOF_MARK)
					break;
				OutputStream putc(c);
				if	(c == '\n')
					break;
				}
			}
		else
			sb skipToEol();
		}
	else	{
		error(ErrBadDirective, Accum);
		sb skipToEol();
		}
	}
/*
	This function is called when it is determined that we have a macro
	with some non-zero number of arguments.  This function returns the
	argument list.  If the function returns a null pointer, the 
	argument list has some sort of syntax error.
 */
parseArguments:	(sb: ref sourceBuffer) ref argument =
	{
	aglist:	ref argument;
	aglast:	ref argument;
	ag:	ref argument;
	c:	char;
	i:	Size;
	s:	[:] char;

	aglist = 0;
	aglast = 0;
	for	(;;){
		clearAccumulation();
		s = accumulateIdentifier(sb);
		if	(|s == 0){
			delete aglist;
			return 0;
			}
		ag = argument create(s);
		if	(aglist)
			aglast->next = ag;
		else
			aglist = ag;
		aglast = ag;
		skipSpace(sb);
		c = sb getc();
		if	(c == ')')
			break;
		else if	(c != ','){
			delete aglist;
			return 0;
			}
		skipSpace(sb);
		}
	return aglist;
	}
/*
	This code collects the expansion part of a macro.  If any arguments
	are defined for the macro, they are passed in as args.  For a 
	manifest constant, no arguments are passed.  The function returns
	TRUE if the expansion was properly formed, FALSE otherwise.

	Three special transformations are performed to make it easier to
	expand stringizers, token-pastings and argument substitutions.  This
	work is performed here because macros will be expanded more
	frequently than they are defined.  Of course, this is not an
	absolutely certain fact in C.  Large libraries are now in use that
	involve hundreds of macros.
 */
TOKEN_PASTE:	const	char = '-';
STRINGIZE:	const	char = '"';
SHARP:		const	char = '#';
SPELLING:	const	char = 0xC0;
ARGUMENT:	const	char = 0x80;	// highest argument number

collectExpansion:	(sb: ref sourceBuffer, args: ref argument) boolean =
	{
	i:	int;
	cp:	ref char;
	c:	char;
	s:	[:] char;

	skipSpace(sb);
	clearAccumulation();
	for	(;;){
		if	(skipSpace(sb))
			accumulate(' ');
		c = sb getc();
		if	(c == '\n' ||
			 c == EOF_MARK)
			break;
		if	(c == '#'){
			c = sb getc();
			if	(c == '#'){
				discardLastSpace();
				skipSpace(sb);
				accumulate('#');
				accumulate(TOKEN_PASTE);
				}
			else	{
				sb ungetc();
				skipSpace(sb);
				s = accumulateIdentifier(sb);
				if	(|s == 0){
					error(ErrStringizeSyntax);
					return FALSE;
					}
				i = args lookup(s);
				if	(i == 0){
					error(ErrNotArgument, s);
					return FALSE;
					}
				popAccumulate(cp);
				accumulate('#');
				accumulate(STRINGIZE);
				accumulate(i);
				}
			}
		else if	(c == '"' || c == '\''){
			accumulate(c);
			for	(;;){
				d:	char;

				d = sb getc();
				if	(d == c){
					accumulate(c);
					break;
					}
				else if	(d == '\\'){
					accumulate(d);
					d = sb getc();
					if	(d == EOF_MARK ||
						 d == '\n'){
						error(ErrStringNoTerm);
						return FALSE;
						}
					accumulate(d);
					}
				else if	(d == EOF_MARK ||
					 d == '\n'){
					error(ErrStringNoTerm);
					return FALSE;
					}
				else if	(d == '#'){
					accumulate(d);
					accumulate(SHARP);
					}
				else
					accumulate(d);
				}
			}
		else if	(isalpha(c) || c == '_'){
			sb ungetc();
			s = accumulateIdentifier(sb);
			i = args lookup(s);
			if	(i){
				popAccumulate(s);
				accumulate('#');
				accumulate(ARGUMENT + i);
				}
			}
		else
			accumulate(c);
		}
	trimTrailingSpaces();
	for	(cp = Accum; *cp; cp++){
		if	(*cp != '#')
			continue;
		cp++;
		if	(*cp > ARGUMENT){
			if	(cp[1] == '#' &&
				 cp[2] == TOKEN_PASTE)
				*cp += (SPELLING - ARGUMENT);
			}
		else if	(*cp == TOKEN_PASTE){
			if	(cp[1] == '#' &&
				 cp[2] > ARGUMENT)
				cp[2] += (SPELLING - ARGUMENT);
			}
		}
	dumpData(Accum, accumulationLength());
	return TRUE;
	}

skipLines:	(sb: ref sourceBuffer) boolean =
	{
	c:	char;
	s:	[:] char;

	for	(;;){
		if	(isDirective(sb)){
			s = accumulated(Accum);
			if	(stringCompare(s, "if") == 0 ||
				 stringCompare(s, "ifdef") == 0 ||
				 stringCompare(s, "ifndef") == 0){
				sb skipToEol();
				skipToEndif(sb);
				}
			else if	(stringCompare(s, "else") == 0 ||
				 stringCompare(s, "endif") == 0){
				c = sb getc();
				if	(c != '\n'){
					error(ErrJunkInDirective);
					sb skipToEol();
					}
				return TRUE;
				}
			else if	(stringCompare(s, "elif") == 0){
				sb skipToEol();
				}
			else
				sb skipToEol();
			}
		else	{
			c = sb getc();
			if	(c == EOF_MARK)
				return FALSE;
			if	(c != '\n')
				sb skipToEol();
			}
		}
	}

skipToEndif:	(sb: ref sourceBuffer) boolean =
	{
	c:	char;
	s:	[:] char;

	for	(;;){
		if	(isDirective(sb)){
			s = accumulated(Accum);
			if	(stringCompare(s, "if") == 0 ||
				 stringCompare(s, "ifdef") == 0 ||
				 stringCompare(s, "ifndef") == 0){
				sb skipToEol();
				skipToEndif(sb);
				}
			else if	(stringCompare(s, "endif") == 0){
				c = sb getc();
				if	(c != '\n'){
					error(ErrJunkInDirective);
					sb skipToEol();
					}
				return TRUE;
				}
			else
				sb skipToEol();
			}
		else	{
			c = sb getc();
			if	(c == EOF_MARK)
				return FALSE;
			if	(c != '\n')
				sb skipToEol();
			}
		}
	}

expandLine:	(sb: ref sourceBuffer) boolean =
	{
	c:	char;
	in:	bufferSource = [ sb ];
	b:	boolean;

	b = expandText(&in, &FileSink);
	OutputStream putc('\n');
	return b;
	}

In:	ref inputSource;

expandText:	(in: ref inputSource, out: ref outputSink) boolean =
	{
	c:	int;
	sv:	ref inputSource;
	i:	int;
	s:	[:] char;

	sv = In;
	In = in;
	for	(;;){
//		if	(In)
//			In display();
		if	(In skipSpaces())
			out putc(' ');
		c = In bigGetc();
		switch	(c){
		case	EOF_MARK:
			In = In close();
			if	(In == 0){
				In = sv;
				return FALSE;
				}
			break;

		case	'\n':
			In = sv;
			return TRUE;

		case	'"':
		case	'\'':
			d:	char;

			out putc(c);
			for	(;;){
				d = In getc();
				if	(d == c){
					out putc(c);
					break;
					}
				else if	(d == EOF_MARK ||
					 d == '\n'){
					error(ErrStringNoTerm);
					In ungetc();
					out putc('#');
					out putc(c);
					break;
					}
				out putc(d);
				}
			break;

		case	'_':
		case	'a':
		case	'b':
		case	'c':
		case	'd':
		case	'e':
		case	'f':
		case	'g':
		case	'h':
		case	'i':
		case	'j':
		case	'k':
		case	'l':
		case	'm':
		case	'n':
		case	'o':
		case	'p':
		case	'q':
		case	'r':
		case	's':
		case	't':
		case	'u':
		case	'v':
		case	'w':
		case	'x':
		case	'y':
		case	'z':
		case	'A':
		case	'B':
		case	'C':
		case	'D':
		case	'E':
		case	'F':
		case	'G':
		case	'H':
		case	'I':
		case	'J':
		case	'K':
		case	'L':
		case	'M':
		case	'N':
		case	'O':
		case	'P':
		case	'Q':
		case	'R':
		case	'S':
		case	'T':
		case	'U':
		case	'V':
		case	'W':
		case	'X':
		case	'Y':
		case	'Z':
			cp:	ref char;
			id:	ref identifier;

			cp = pushAccumulate();
			s = In accumulateIdentifier(c);
			id = identifier create(s);
//			printf("id %s\n", s);
			popAccumulate(s);
			if	(!id isDefined()){
				out hatIdentifier();
				ids:	[:] char;

				ids = id spelling();
				out putDString(ids);
				break;
				}

				// it is a macro, is it a manifest constant?

			if	(!id needsArguments()){
				In = expansionSource create(In, id, 0);
				break;
				}

				// It is a macro needing arguments, does it
				// have an open parenthesis?

			In skipWhiteSpace();

				// Nope, it doesn't need to be expanded.

			c = In getc();
			if	(c != '('){
				In ungetc();
//				out hatIdentifier();
				ids:	[:] char;

				ids = id spelling();
				out putDString(ids);
				break;
				}
			a:	ref actualArgument;
			In skipWhiteSpace();
			c = In getc();
			if	(c == ')')
				a = 0;
			else	{
				In ungetc();
				a = collectActuals();
				if	(a == 0)
					break;
				}
			In = expansionSource create(In, id, a);
			break;

		case	HAT_IDENTIFIER:
			c = In getc();
			s = In accumulateIdentifier(c);
			id = identifier create(s);
			popAccumulate(s);
			out hatIdentifier();
			ids:	[:] char;

			ids = id spelling();
			out putDString(ids);
			break;

		default:
			out putc(c);
			break;
			}
		}
	}
/*
	This function is called when it is determined that we have a macro
	call with some possibly zero number of arguments.  This function 
	returns the actual argument list.
 */
collectActuals:	() ref actualArgument =
	{
	aglist:	ref actualArgument;
	aglast:	ref actualArgument;
	ag:	ref actualArgument;
	c:	char;

	aglist = 0;
	aglast = 0;
	for	(;;){
		cp:	ref char;
		nest:	int;

		cp = pushAccumulate();
		c = accumulateSpelling();
		if	(c == EOF_MARK){
			popAccumulate(cp);
			if	(aglist)
				delete aglist;
			error(ErrUnexpectedEof);
			return 0;
			}
		i:	int;
		i = trimTrailingSpaces();
		ag = actualArgument create(cp[:i]);
		popAccumulate(cp);
		ag expand();
		if	(aglist)
			aglast->next = ag;
		else
			aglist = ag;
		aglast = ag;
		if	(c == ')')
			break;

			// c must be a comma

		In skipWhiteSpace();
		}
	return aglist;
	}

accumulateSpelling:	() char =
	{
	cp:	ref char;
	nest:	int;
	c:	int;

	In skipSpaces();
	nest = 0;
	for	(;;){
		if	(In skipWhiteSpace())
			accumulate(' ');
		c = In bigGetc();
		switch	(c){
		case	EOF_MARK:
			In = In close();
			if	(In == 0)
				return c;
			break;

		case	HAT_IDENTIFIER:
			accumulate(0xFF);
			accumulate(0xFE);
			break;

		case	')':
			if	(nest <= 0)
				return c;
			nest--;
			accumulate(c);
			break;


		case	',':
			if	(nest <= 0)
				return c;
			accumulate(c);
			break;

		case	'(':
			nest++;

		default:
			if	(c == 0xFF)
				accumulate(c);
			accumulate(c);
			}
		}
	}

bufferSource:	public	type	inherit inputSource {
	source:		ref sourceBuffer;

constructor:	(sb: ref sourceBuffer) =
	{
	super constructor(0);
	source = sb;
	}

display:	dynamic	() =
	{
	printf("next = %x\n", next);
	printf("pos = %x endPos = %x\n", source->pos, source->endPos);
	dumpData(&source->text[source->pos], 64);
	}

getc:	dynamic	() int =
	{
	return source getc();
	}

ungetc:	dynamic	() =
	{
	source ungetc();
	}

skipSpaces:	dynamic	() boolean =
	{
	return skipSpace(source);
	}

	};

expansionSource:	public	type	inherit inputSource	{
	public:

	macro:			ref identifier;
	baseline:		ref char;
	text:			ref char;
	actuals:		ref actualArgument;

create:	factory	(n: ref inputSource, id: ref identifier,
				a: ref actualArgument) ref expansionSource =
	{
	self = new expansionSource[ n, id ];
	actuals = a;
	return self;
	}

display:	dynamic	() =
	{
	printf("next = %x baseline = %x text = %x\n", next, baseline, text);
	i:	int;
	i = stringLength(text);
	if	(i > 64)
		i = 64;
	dumpData(text, i);
	}

constructor:	(n: ref inputSource, id: ref identifier) =
	{
	macro = id;
	text = id->Expansion;
	baseline = id->Expansion;
	id->Expansion = 0;		// hide the macro
	super constructor(n);
	}

close:	dynamic	() ref inputSource =
	{
	n:	ref inputSource;

	macro->Expansion = baseline;
	n = next;
	delete self;
	return n;
	}

getc:	dynamic	() int =
	{
	c:	char;

	c = *text++;
	if	(c == '#'){
		a:	ref actualArgument;

		c = *text++;
		if	(c == TOKEN_PASTE){
			return getc();
			}
		else if	(c == STRINGIZE){
			s:	ref char;
			i:	int;
			cp:	ref char;
			inString:	boolean;
			delimiter:	char;

			c = *text++;
			a = actuals index(c - 1);
			if	(a == 0)
				return c;
			inString = FALSE;
			for	(cp = a->spelling, i = 3; *cp; cp++, i++){
				switch	(*cp){
				case	'\\':
					if	(inString){
						i++;
						if	(cp[1] == '"'){
							i += 2;
							cp++;
							}
						}
					break;

				case	'"':
				case	'\'':
					i++;
					if	(!inString){
						delimiter = *cp;
						inString = TRUE;
						}
					else if	(*cp == delimiter)
						inString = FALSE;
					break;
					}
				}
			s = new [i] char;
			s[0] = '"';
			dst:	ref char;
			dst = s + 1;
			inString = FALSE;
			for	(cp = a->spelling; *cp; cp++){
				switch	(*cp){
				case	0xFF:
					cp++;
					if	(*cp == 0xFF)
						*dst++ = *cp;
					break;

				case	'\\':
					*dst++ = '\\';
					if	(inString){
						*dst++ = '\\';
						if	(cp[1] == '"'){
							*dst++ = '\\';
							*dst++ = '"';
							cp++;
							}
						}
					break;

				case	'"':
					*dst++ = '\\';
				case	'\'':
					*dst++ = *cp;
					if	(!inString){
						delimiter = *cp;
						inString = TRUE;
						}
					else if	(*cp == delimiter)
						inString = FALSE;
					break;

				default:
					*dst++ = *cp;
					}
				}
			*dst++ = '"';
			In = stringSource create(In, s, TRUE);
			return In getc();
			}
		else if	(c == SHARP)
			return '#';
		else if	(c > SPELLING){
			a = actuals index(c - (SPELLING + 1));
			if	(a == 0)
				return c;
			cp:	ref char;

			cp = a->expansion;
			if	(cp[0] == 0xFF &&
				 cp[1] != 0xFF)
				cp += 2;	// strip off hat mark
			In = stringSource create(In, cp, FALSE);
			return In getc();
			}
		else	{
			a = actuals index(c - (ARGUMENT + 1));
			if	(a == 0)
				return c;
			In = stringSource create(In, a->expansion, FALSE);
			return In getc();
			}
		}
	else
		return c;
	}

ungetc:	dynamic	() =
	{
	text--;
	if	(*text == SHARP)
		text--;
	}

accumulateIdentifier:	dynamic	(c: char) [:] char =
	{
	i:	int;
	cp:	ref char;

	cp = pushAccumulate();
	accumulate(c);
	i = 1;
	for	(;;){
		c = getc();
		if	(!isalnum(c) && c != '_')
			break;
		if	(i < ID_LENGTH){
			accumulate(c);
			i++;
			}
		}
	ungetc();
	return cp[:i];
	}

	};

stringSource:	public	type	inherit inputSource	{
	public:
	text:			ref char;
	baseline:		ref char;
	temp:			boolean;

create:	factory	(n: ref inputSource, cp: ref char, 
				tmp: boolean) ref stringSource =
	{
	return new stringSource[ n, cp, cp, tmp ];
	}

close:	dynamic	() ref inputSource =
	{
	n:	ref inputSource;

	n = next;
	if	(temp)
		delete baseline;
	delete self;
	return n;
	}

display:	dynamic	() =
	{
	i:	int;

	printf("next = %x\n", next);
	i = stringLength(text);
	if	(i > 64)
		i = 64;
	dumpData(text, i);
	}

getc:	dynamic	() int =
	{
	return *text++;
	}

bigGetc:	dynamic	() int =
	{
	c:	char;

	c = *text++;
	if	(c != 0xFF)
		return c;
	c = *text++;
	if	(c == 0xFF)
		return c;
	else
		return HAT_IDENTIFIER;
	}

ungetc:	dynamic	() =
	{
	text--;
	}

	};

HAT_IDENTIFIER:	const	int = 0x100;

actualArgument:	public	type	{
	public:
	next:		ref actualArgument;
	spelling:	ref char;
	expansion:	ref char;

create:	factory	(sp: [:] char) ref actualArgument =
	{
	self = new actualArgument[ 0, 0, 0 ];
	dumpData(sp, |sp);
	spelling = new [|sp + 1] char;
	spelling[:|sp] = sp;
	spelling[|sp] = 0;
	return self;
	}

expand:	() =
	{
	in:	ref stringSource;
	b:	boolean;
	cp:	ref char;
	i:	int;

	in = stringSource create(0, spelling, FALSE);
	cp = pushAccumulate();
	out: stringSink = [ 0 ];
	i = expandText(in, &out);
	expansion = new [i + 1] char;
	if	(i)
		expansion[:i] = cp[:i];
	expansion[i] = 0;
	popAccumulate(cp);

	dest:	ref char;

	dest = cp = spelling;
	while	(*cp){
		if	(cp[0] == 0xFF &&
			 cp[1] == 0xFE)
			cp += 2;
		*dest++ = *cp++;
		}
	*dest = 0;
	}

index:	(i: int) ref actualArgument =
	{
	while	(i && self){
		i--;
		self = next;
		}
	return self;
	}

destructor:	() =
	{
	delete spelling;
	if	(expansion)
		delete expansion;
	if	(next)
		delete next;
	}

	};

inputSource:	public	type	{
	public:
	next:	ref inputSource;

constructor:	(n: ref inputSource) =
	{
	next = n;
	}

close:	dynamic	() ref inputSource =
	{
	return next;
	}

display:	dynamic	() =
	{
	}

getc:	dynamic	() int =
	{
	}

bigGetc:	dynamic	() int =
	{
	return getc();
	}

ungetc:	dynamic	() =
	{
	}

skipWhiteSpace:	() boolean =
	{
	c:		char;
	foundAny:	boolean;

	foundAny = FALSE;
	for	(;;){
		foundAny |= In skipSpaces();
		c = In getc();
		if	(c == '\n')
			foundAny = TRUE;
		else if	(c == EOF_MARK &&
			 In->next){
			In = In close();
			}
		else	{
			In ungetc();
			return foundAny;
			}
		}
	}

skipSpaces:	dynamic	() boolean =
	{
	c:		char;
	foundAny:	boolean;

	foundAny = FALSE;
	while	(getc() == ' ')
		foundAny = TRUE;
	In ungetc();
	return foundAny;
	}

accumulateIdentifier:	dynamic	(c: char) [:] char =
	{
	i:	Size;
	cp:	ref char;

	cp = pushAccumulate();
	i = 0;
	do	{
		if	(i < ID_LENGTH){
			accumulate(c);
			i++;
			}
		c = getc();
		}
		while	(isalnum(c) || c == '_');
	ungetc();
	return cp[:i];
	}

	};

FileSink:	public	inherit outputSink {

putc:	dynamic	(c: char) =
	{
	OutputStream putc(c);
	}

	};

stringSink:	public	type	inherit outputSink {

constructor:	(int) =
	{
	}

hatIdentifier:	dynamic	() =
	{
	accumulate(0xFF);
	accumulate(0xFE);
	}

putc:	dynamic	(c: char) =
	{
	if	(c == 0xFF)
		accumulate(c);
	accumulate(c);
	}

	};

outputSink:	public	type	{
	public:

putString:	(s: ref char) =
	{
	while	(*s)
		putc(*s++);
	}

putDString:	(s: [:] char) =
	{
	i:	int;

	for	(i = 0; i < |s; i++)
		putc(s[i]);
	}

hatIdentifier:	dynamic	() =
	{
	}

putc:	dynamic	(char) =
	{
	}

	};
/*
	This function skips any leading white space in the source buffer
	and returns TRUE if any white space was found, FALSE otherwise.
 */
skipSpace:	(sb: ref sourceBuffer) boolean =
	{
	c:		char;
	foundAny:	boolean;

	foundAny = FALSE;
	for	(;;){
		c = sb getc();
		if	(c == ' ' ||
			 c == '\t' ||
			 c == '\v' ||
			 c == '\f')
			foundAny = TRUE;
		else if	(c == '/'){
			c = sb getc();
			if	(c == '*')
				sb skipComment();
			else if	(LineComments && c == '/')
				sb skipToEol();
			else	{
				sb ungetc();
				break;
				}
			foundAny = TRUE;
			}
		else
			break;
		}
	sb ungetc();
	return foundAny;
	}

hasExtension:	(path: [:] char) boolean =
	{
	s:	[:] char;
	i, j:	int;

	s = path;
	j = stringReverseScan(path, '/');
	if	(j >= 0)
		path = path[j + 1:];
	i = stringReverseScan(path, '.');
	if	(i < 0)
		return FALSE;
	else if	(i == 0){
		if	(|path == 1)
			return FALSE;		// filename is .
		}
	else if	(i == 1){
		if	(|path == 2 &&
			 path[0] == '.')	// filename is ..
			return FALSE;
		}
	return TRUE;
	}

newExtension:	(f: [:] char, ext: [:] char) [:] char =
	{
	s:	[:] char;
	n:	[:] char;

	s = stripExtension(f);
	n = new [ |s + |ext ] char;
	memCopy(n, f, |s);
	memCopy(n + |s, ext, |ext);
	return n;
	}

defineStandardSymbols:	() =
	{
	systemDate:		Date;
	s:			[:] char;

	systemDate decode(time());
	identifier create("__STDC__") define("1", 0, FALSE);

	se: stringEmitter = [ Accum ];
	se printf("%3.3s %02d %d", &Months[(systemDate.month - 1) * 3],
			systemDate.monthday, 
			systemDate.year);
	s = se result();
	identifier create("__DATE__") define(s, 0, FALSE);

	se = [ Accum ];
	se printf("%02d:%02d:%02d",
			systemDate.hour, 
			systemDate.minute, 
			systemDate.second);
	s = se result();
	identifier create("__TIME__") define(s, 0, FALSE);
	}

Months:		ref char = "JanFebMarAprMayJunJulAugSepOctNovDec";

helpScreen:	() =
	{
	printf("Use is: CPP [ options ] file\n"
		"options:\n"
		"	-C		Allow nested comments\n"
		"	-CL		Allow line comments (/" "/)\n"
		"	-Dxxx		Define macro as nil\n"
		"	-Dxxx=yyy	Define macro as string\n"
		"	-e		Keep output on error\n"
		"	-p		Echo pragmas\n"
		"	-Ixxx		Include directory\n"
		"	-Uxxx		Undefine macro\n"
		);
	exit(1);
	}

accumulateIdentifier:	(sb: ref sourceBuffer) [:] char =
	{
	c:	char;
	cp:	ref char;
	i:	Size;

	cp = pushAccumulate();
	i = 0;
	c = sb getc();
	if	(!isalpha(c) && c != '_'){
		sb ungetc();
		return cp[:0];
		}
	for	(;;){
		if	(i < ID_LENGTH){
			accumulate(c);
			i++;
			}
		c = sb getc();
		if	(!isalnum(c) && c != '_'){
			sb ungetc();
			return cp[:i];
			}
		}
	}

clearAccumulation:	() =
	{
	AccumPtr = Accum;
	Accum[0] = 0;
	}

pushAccumulate:	() ref char =
	{
	return AccumPtr;
	}

popAccumulate:	(a: ref char) =
	{
	AccumPtr = a;
	a[0] = 0;
	}

accumulate:	(c: char) =
	{
	if	(AccumPtr < &Accum[sizeof Accum - 1]){
		*AccumPtr++ = c;
		*AccumPtr = 0;
		}
	}

accumulated:	(a: ref char) [:] char =
	{
	return a[:AccumPtr - a];
	}

accumulationLength:	() Size =
	{
	return AccumPtr - Accum;
	}

trimTrailingSpaces:	() int =
	{
	i:	int;

	i = AccumPtr - Accum;

		// Trim any trailing spaces

	if	(i > 0 && Accum[i - 1] == ' '){
		i--;
		AccumPtr--;
		Accum[i] = 0;
		}
	return i;
	}

discardLastSpace:	() =
	{
	if	(AccumPtr > Accum &&
		 AccumPtr[-1] == ' '){
		AccumPtr--;
		*AccumPtr = 0;
		}
	}

AccumPtr:	ref char = Accum;
Accum:	[4097] char;

dumpData:	(p: pointer, len: int) =
	{
	cp:	ref char;
	i:	int;
	j:	int;

	cp = p;
	while	(len){
		printf("%08x: ", cp);
		i = 8;
		j = 0;
		while	(i && len){
			printf("%02x ", cp[8 - i]);
			i--;
			j++;
			len--;
			}
		while	(i){
			printf("   ");
			i--;
			}
		i = 8;
		printf(" ");
		while	(i && len){
			printf("%02x ", cp[16 - i]);
			i--;
			j++;
			len--;
			}
		while	(i){
			printf("   ");
			i--;
			}
		printf("  ");
		for	(i = 0; i < j; i++)
			printf("%c", cp[i]);
		cp += 16;
		printf("\n");
		}
	}
