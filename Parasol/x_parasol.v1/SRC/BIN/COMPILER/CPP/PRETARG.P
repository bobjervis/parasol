/*
	There may be any number of implementation supported integral
	types.  The char, int and long sizes are guaranteed to exist.
	The char size is the smallest size that can be stored.  The
	int size is the smallest computational size.  The long size
	is the largest supported size.
 */
CHARBITS:	public	const	int = 8;	// bits per char
INTBITS:	public	const	int = 32;	// bits per int

CCLEN:		public	const	int = 4;	// max # of chars in character
						// constant
/*
	This function accepts a long integer value and reduces it to a
	value that is representable within the number of bits given by
	the bits parameter.  If the bits value is negative, the number
	should be treated as a signed quantity and the value should be
	truncated to a signed integer value.

	Limitations:

	This code only works for 2's complement signed integers.

	You can only truncate a value that can be represented as a
	long.  Obviously, larger values must be handled differently.
	This has significance when this code is used in a cross-compiler
	that targets a machine with a larger long than the host's.
 */
integerConstant:	public	(i: long, bits: int) long =
	{
	mask:	long;
	sign:	int;

	sign = bits;			// remember the signedness
	if	(bits < 0)
		bits = -bits;		// force bits to positive
	if	(bits >= 32)
		return i;
	mask = 1L << bits - 1;
	i &= mask;
	if	(sign < 0 && 
		 i & (1 << (bits - 1)))
		i |= ~mask;		// sign extend
	return i;
	}
/*
	This function determines whether the given value is representable
	in the number of bits given.

	Notes:

	This code only works using 2's complement signed integers on the
	host.  The target can use 1's complement.

	The number of bits is reduced by one for signed integers, since
	the extra bit is the sign.
 */
integerFits:	public	(i: long, bits: int) boolean =
	{
	mask:	long;
	sign:	int;

	sign = bits;			// remember the signedness
	if	(bits < 0)
		bits = -bits - 1;	// force bits to positive
	mask = ~(1L << bits - 1);
	i &= mask;
	if	(i == 0)
		return TRUE;		// a positive value!
	if	(sign && i == mask)
		return TRUE;		// a negative signed value!
	else
		return FALSE;		// not representable
	}

