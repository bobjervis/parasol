/*
	Copyright (c) 1994 by Robert Jervis
	All rights reserved.

	Permission to use, copy, modify and distribute this software is
	subject to the license described in the READ.ME file.
 */
include	alys;

PASSWORD_VERSION:	public	const	int = 1;
USER_NAME_LENGTH:	public	const	int = 32;
/*
	A user catalog is the object that the password server presents to
	the outside world.  
 */
userCatalog:	public	type	inherit	external	{
	public:
//
//	This function expects the value of PASSWORD_VERSION passed at the
//	second argument.  This will allow for evolution of the password
//	encryptian algorithm.
//
tryToLogin:		gate	(name: [:] char, version: int);
//
//	This function notifies the password server that the given user is
//	logging out.
//
logout:			gate	(user: userId);
//
//	Add a user to the user catalog
//
addUser:		gate	(u: userId, g: userId, 
				 name: [:] char,
				 passwd: [:] char,
				 home: [:] char) int;
//
//	Initiate a verify password sequence.
//
verifyPassword:		gate	(name: [:] char, version: int);
//
//	Initiate a change password sequence.
//
changePassword:		gate	(name: [:] char, version: int);
//
//	List users
//
startListing:		gate	() int;

listUser:		gate	(ver: int, index: int) userDescriptor_t;

listUserName:		gate	(ver: int, index: int) [] char;

listHomeDirectory:	gate	(ver: int, index: int) [] char;
//
//	Check version
//
getVersion:	gate	() int =
	{
	return PASSWORD_VERSION;
	}

	};

userDescriptor_t:	public	type	{ public:
	userid:		userId;
	groupid:	userId;
	};
/*
	A login object is what tries to login to a userCatalog.  THe
	protocol works as follows:

		login object sends a tryToLogin message to a userCatalog.
		The userCatalog spawns a thread that challenges the login
		object with an askForPassword message.  

		The login object encrypts the password using the key provided
		in the message.  Encryption is performed by the 
		encryptPassword function.

		The login object replies with the encrypted password.

		The challenge thread checks the encrypted password and
		confirms or rejects the login.  This is accomplished by
		sending either an ack or nack message to the login object.

		If an ack is sent, the challenge thread also has to notify
		the network manager that a new user has logged in.  If no
		network manager is loaded, this step has no effect.

		Once the ack or nack is sent, the challenge thread terminates.
 */
login:		public	type	inherit	external	{
	public:
//
//		This method supplies an encryptian key.  The method should
//		return the encrypted existing password (for login, verify or
//		change password operations.
//
askForPassword:	gate	(key: [:] byte) [] byte =
	{
	}
//
//		This method is called as a follow up to encrypt and return
//		the new password.
//
askForNewPassword:	gate	(key: [:] byte) [] byte =
	{
	}
//
//	This method provides a positive acknowledgement of a login.  If
//	this message is sent, the login succeeded, the new user and group
//	ids are specified, and the user's home directory is named.  The
//	login program then figures out what to do based on what is stored
//	in the user's home directory.
//
ack:	gate	(uid: userId, gid: userId, homeDirectory: [:] char) =
	{
	}
//
//	This method provides a positive acknowledgement of a password
//	verification or changed password operation.
//
verified:	gate	() =
	{
	}
//
//	This method provides a negative acknowledgement of an operation.
//	If this message is sent, the login failed.  The login program 
//	should reject the login and ask the user to try again.  A verify or
//	change password operation has failed.
//
nack:	gate	() =
	{
	}

	};
//
//		The user methods should use the following routine to perform
//		encryption.  Note that no encryption takes place in this
//		function.  For testing purposes, the straight-through approach
//		should allow the protocol to be tested, even though it is 
//		insecure.
//
encryptPassword:	public	(out: [:] byte, passwd: [:] char,
					key: [:] byte) [:] byte =
	{
	i:	int;
	p:	[:] byte;

		// First, convert the password string to an array of bytes.

	i = |passwd * sizeof char;
	p = ref byte(passwd)[:i];

		// Now 'encrypt it'.  For testing purposes, no encryption
		// takes place.

	if	(||out < |p)
		out = "";
	else
		out [:]= p;
	return out;
	}
